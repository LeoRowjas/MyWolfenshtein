using WolfShooter.BaseEntities;

namespace WolfShooter.Models
{
    public static class Map
    {
        public static readonly int[][] MapObjects = {
            new[] {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            new[] {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
            new[] {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
            new[] {1,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,1},
            new[] {1,0,0,0,0,0,2,2,2,2,2,0,0,0,0,2,0,0,0,0,0,0,0,1},
            new[] {1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1},
            new[] {1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,1},
            new[] {1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1},
            new[] {1,0,0,0,0,0,2,2,0,2,2,0,0,0,0,2,0,2,2,2,2,2,2,1},
            new[] {1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,1},
            new[] {1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,1},
            new[] {1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,1},
            new[] {1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1},
            new[] {1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,1},
            new[] {1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,2,2,2,2,2,2,2,1},
            new[] {1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1},
            new[] {1,2,0,2,2,2,2,2,2,2,2,0,0,0,0,2,0,0,0,0,0,0,0,1},
            new[] {1,2,0,2,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1},
            new[] {1,2,0,0,0,0,5,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1},
            new[] {1,2,0,2,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1},
            new[] {1,2,0,2,2,2,2,2,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1},
            new[] {1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1},
            new[] {1,2,2,2,2,2,2,2,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1},
            new[] {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        };

        public static bool InBounds(Vector cords)
        {
            var lengthX = MapObjects.GetLength(0);
            var lengthY = MapObjects[0].GetLength(0);
            return cords is { X: > 0, Y: > 0 }
                   && cords.X < lengthX && cords.Y < lengthY;
        }
    }
}
